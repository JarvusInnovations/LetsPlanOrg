name: Release laravel-site Container

on:
  push:
    branches: [ releases/laravel-site ]

env:
  DOCKER_PACKAGE: laravel-site


jobs:
  release-laravel-site-container:
    name: Build and Push
    runs-on: ubuntu-latest
    steps:

    - name: Initializing bare repository
      run: |
        git init --bare projection.git
        echo "GIT_DIR=$(pwd)/projection.git" >> $GITHUB_ENV

    - name: Fetch latest commit
      run: git fetch --depth=1 "https://${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}" "${GITHUB_REF}:${GITHUB_REF}"

    - name: Login to docker.pkg.github.com
      uses: docker/login-action@v1
      with:
        registry: docker.pkg.github.com
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to ghcr.io
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Compute Docker container image address
      run: |
        DOCKER_REPOSITORY="${GITHUB_REPOSITORY,,}"

        DOCKER_IMAGE="docker.pkg.github.com/${DOCKER_REPOSITORY}/${DOCKER_PACKAGE}"
        echo "Using path: ${DOCKER_IMAGE}"
        echo "DOCKER_IMAGE=${DOCKER_IMAGE}" >> $GITHUB_ENV
        echo "DOCKER_REPOSITORY=${DOCKER_REPOSITORY}" >> $GITHUB_ENV
        echo "DOCKER_PACKAGE=${DOCKER_PACKAGE}" >> $GITHUB_ENV

        SOURCE_TREE="$(git rev-parse "${GITHUB_REF}^{tree}")"
        echo "Using tree hash: ${SOURCE_TREE}"
        echo "SOURCE_TREE=${SOURCE_TREE}" >> $GITHUB_ENV

        echo "Checking registry for existing Docker container image"

        set +e
        DOCKER_MANIFEST="$(curl -X GET \
          -u "${{ github.repository_owner }}:${{ secrets.GITHUB_TOKEN }}" \
          --fail \
          "https://docker.pkg.github.com/v2/${DOCKER_REPOSITORY}/${DOCKER_PACKAGE}/manifests/${SOURCE_TREE}"
        )"

        if [ $? -eq 0 ]; then
          echo "Found existing manifest"
          echo "DOCKER_TAG_EXISTS=true" >> $GITHUB_ENV

          echo 'DOCKER_MANIFEST<<END_OF_MANIFEST' >> $GITHUB_ENV
          echo "${DOCKER_MANIFEST}" >> $GITHUB_ENV
          echo 'END_OF_MANIFEST' >> $GITHUB_ENV
        fi
        set -e

    - name: Applying :latest tag to existing Docker container image
      if: env.DOCKER_TAG_EXISTS == 'true'
      run: |
        curl -X PUT \
          -u "${{ github.repository_owner }}:${{ secrets.GITHUB_TOKEN }}" \
          --fail \
          -d "${DOCKER_MANIFEST}" \
          "https://docker.pkg.github.com/v2/${DOCKER_REPOSITORY}/${DOCKER_PACKAGE}/manifests/latest"

    # - uses: mxschmitt/action-tmate@v3
    #   env:
    #     CURL_AUTH: "${{ github.repository_owner }}:${{ secrets.GITHUB_TOKEN }}"

    - name: Pull latest existing Docker container image
      if: env.DOCKER_TAG_EXISTS != 'true'
      run: docker pull "${DOCKER_IMAGE}:latest" || true

    - name: Build Docker container image
      if: env.DOCKER_TAG_EXISTS != 'true'
      run: |
        git archive "${GITHUB_REF}" --format=tar \
          | docker build \
              --cache-from "${DOCKER_IMAGE}:latest" \
              --tag "${DOCKER_IMAGE}:latest" \
              --tag "${DOCKER_IMAGE}:${SOURCE_TREE}" \
              -

    - name: Push Docker container image tag :${SOURCE_TREE}
      if: env.DOCKER_TAG_EXISTS != 'true'
      run: docker push "${DOCKER_IMAGE}:${SOURCE_TREE}"

    - name: Push Docker container image tag :latest
      if: env.DOCKER_TAG_EXISTS != 'true'
      run: docker push "${DOCKER_IMAGE}:latest"
